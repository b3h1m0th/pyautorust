name: Windows Runner with RustDesk

on:
  workflow_dispatch:

jobs:
  screenshot:
    runs-on: windows-latest
    timeout-minutes: 240  # Keep runner alive for 4 hours

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download RustDesk
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/rustdesk/rustdesk/releases/download/1.4.0/rustdesk-1.4.0-x86_64.exe" -OutFile "$env:GITHUB_WORKSPACE\rustdesk.exe"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install pyautogui, pillow, and opencv-python
        run: |
          python -m pip install --upgrade pip
          pip install pyautogui pillow opencv-python

      - name: Start RustDesk
        shell: pwsh
        run: |
          Start-Process -FilePath "$env:GITHUB_WORKSPACE\rustdesk.exe"
          Start-Sleep -Seconds 10  # Give RustDesk a moment to start

      - name: Select 3-dot menu with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(3)  # Ensure RustDesk window is fully loaded

          # Option 1: Click by coordinates (update these as needed)
          # Example: pyautogui.click(x=1200, y=50)

          # Option 2: Try to find the 3-dot image on the screen
          # You must provide '3dot.PNG' (the image of the 3-dot menu button) in your repository or workspace.
          try:
              location = pyautogui.locateCenterOnScreen('dotm.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked 3-dot menu at:", location)
              else:
                  print("3-dot menu not found on screen.")
          except Exception as e:
              print("Error locating 3-dot menu:", e)

      - name: Take Screenshot via PowerShell
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
          $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
          $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
          $bitmap.Save("$env:GITHUB_WORKSPACE\screenshot.png", [System.Drawing.Imaging.ImageFormat]::Png)
          $graphics.Dispose()
          $bitmap.Dispose()

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-screenshot
          path: screenshot.png

      - name: Keep Runner Alive for 4 Hours
        shell: pwsh
        run: |
          Write-Host "Keeping the runner alive for 4 hours..."
          Start-Sleep -Seconds 14400  # 4 hours
